사용자 정의 함수 중에서 리턴값이 있는 경우

function 함수명(매개변수1..., 매개변수n){
    함수가 호출되었을 때 실행할 문장;

    return 값;
}
함수명();
함수명(10, 20);

->
const v = 함수명();

1. 이름만 있는 함수
const f1 = () => console.log('hello');

2. 매개변수가 있는 함수
const f2 = x => console.log(`매개변수로 전달받은 값: ${x}`);
const f2 = (x, y) => console.log(`매개변수로 전달받은 값: ${x}${y}`);

-함수 선언식
function 함수명(매개변서1, 매개변수2, ...){
    return 리턴값;
}
-함수 표현식
const name = function(a, b, c...){
    return a;
}
*자바스크립트는 함수를 변수에 넣을 수 있음
*자바스크립트는 script 태그를 만나면 자바스크립트 파일을 먼저 읽고 선언된 함수를 먼저 메모리에 저장함.

호이스팅이란
- 함수 안에 있는 선언문들을 모두 끌어올려서 해당 함수 유효 범위를 최상단에 선언
- 자바스크립트 함수는 실행되가 전에 함수 안에 필요한 변수 값들을 모두 모아서 유효 범위의 최상단에 선언
-var 변수, 함수 선언식만 호이스팅이 일어남
문제점
너무 많은 선언문이 남발되어 있는 자바스크립트 코드는 실행코드의 해석시점이 뒤로 밀리게 됨으로서 자바스크립트 실행코드의 구동시점이 길어지는 좋지않는 결과를 가져오기도 한다.

글로벌함수,변수를 너무 많이 정의해놓으면 hoisting에 의해 지연이 발생할 수 있다는 얘기

변수의 선언
자바스크립트에서는 객체, 함수가 모두 변수(상수)
변수의 범위는 변수가 접근할 수 있는 변수, 객체, 함수의 집합

1. 지역변수
    함수 내에서 선언된 변수
    지역변수는 변수가 선언된 함수 내에서 유효하고 함수가 종료되면 메모리에서 사라짐


2. 전역변수
    함수의 외부에서 선언된 변수
    전역변수는 프로그램의 어느 영역에서나 접근할 수 있음, 웹 페이지가 닫혀야만 메모리에서 사라짐


객체(Object)
-실생활에서 인식할 수 있는 사물들의 객체